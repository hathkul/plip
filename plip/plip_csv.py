import xml.etree.ElementTree as ET
import csv

# Parse the XML file generated by PLIP
tree = ET.parse('report.xml')
root = tree.getroot()

# Find the interactions element anywhere in the tree (it is nested under <bindingsite>)
interactions = root.find('.//interactions')
if interactions is None:
    raise ValueError("Could not find <interactions> element in the XML file.")

# Define mapping: key = container tag, value = (child tag to count, display name)
interaction_types = {
    'hydrophobic_interactions': ('hydrophobic_interaction', 'Hydrophobic Interactions'),
    'hydrogen_bonds': ('hydrogen_bond', 'Hydrogen Bonds'),
    'salt_bridges': ('salt_bridge', 'Salt Bridges'),
    'pi_cation_interactions': ('pi_cation_interaction', 'pi-Cation Interactions'),
    'water_bridges': ('water_bridge', 'Water Bridges'),
    'pi_stacks': ('pi_stack', 'Pi Stacks'),
    'halogen_bonds': ('halogen_bond', 'Halogen Bonds'),
    'metal_complexes': ('metal_complex', 'Metal Complexes'),
}

# Dictionary to hold the counts
counts = {}

# Loop over each interaction type and count the corresponding child elements
for container_tag, (child_tag, display_name) in interaction_types.items():
    container = interactions.find(container_tag)
    if container is not None:
        if child_tag:
            count = len(container.findall(child_tag))
        else:
            count = len(list(container))
    else:
        count = 0
    counts[display_name] = count

# Write the counts to a CSV file
with open('interaction_counts.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['Interaction Type', 'Count'])
    for interaction, count in counts.items():
        writer.writerow([interaction, count])

print("Interaction counts have been written to interaction_counts.csv")
